/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MainContract,
  MainContractInterface,
} from "../../../contracts/MainContract.sol/MainContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenErc20",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenErc721",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "NFTReceived",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "claimReward",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "depositNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "depositOf",
    outputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "APRIncrement",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "accumulatedInterest",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastInterestTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "depositNFTTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lockTime",
            type: "uint256",
          },
        ],
        internalType: "struct MainContract.Deposit",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "depositOfNFT",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "faucet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAPR",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getEventInfo",
    outputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.DepositTokenInfo",
            name: "depositToken",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "NFTId",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.DepositNFTInfo",
            name: "depositNFT",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.WithdrawERC20Info",
            name: "withdrawERC20",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "NFTId",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.WithdrawNFTInfo",
            name: "withdrawNFT",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "user",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.ClaimRewardInfo",
            name: "claimReward",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "from",
                type: "address",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.TransferERC20Info",
            name: "transferERC20",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "address",
                name: "from",
                type: "address",
              },
              {
                internalType: "address",
                name: "to",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "NFTId",
                type: "uint256",
              },
            ],
            internalType: "struct MainContract.TransferNFTInfo",
            name: "transferNFT",
            type: "tuple",
          },
          {
            internalType: "bool",
            name: "successful",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct MainContract.EventInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getFaucetBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getInterest",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "APR",
        type: "uint8",
      },
    ],
    name: "setAPR",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "NFTId",
        type: "uint256",
      },
    ],
    name: "transferNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "updateInterest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "tokenIds",
        type: "uint256[]",
      },
    ],
    name: "withdrawNFT",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346200016c5762001f82906001600160401b0390601f38849003908101601f1916820190838211838310176200017157808391604096879485528339810103126200016c576200005f6020620000578362000187565b920162000187565b6000805485516001600160a01b0394909291859190338382167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08680a36001600160a81b0319163360ff60a01b191617600160a31b1760ff60a81b1916600160a91b1783556001839055600280546001600160a01b03199081169390921692831790559590803b156200016857836044818580946340c10f1960e01b8352306004840152633b9aca0060248401525af180156200015e5762000137575b5050501690600354161760035551611de590816200019d8239f35b82116200014a575084523880806200011c565b634e487b7160e01b81526041600452602490fd5b87513d84823e3d90fd5b8280fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036200016c5756fe60406080815260048036101561001457600080fd5b600091823560e01c80630a72298e14611677578063150b7a02146115945780631d645b12146113ad57806323e3fbd5146112c857806329cb924d146112ad5780632e1a7d4d146111725780633528bee91461113c5780634b0b3dc714610dfc5780635791589714610b7b5780636215be77146107a55780636f9fb98a1461070f578063715018a6146106c75780637aaa34701461069a5780637b3c5da7146106755780638da5cb5b1461064d57806394ab67fe14610589578063b88a802f14610420578063bd8d99f4146103df578063c89d5b8b146103b8578063d7f3387c14610308578063f2fde38b146102575763f7448a311461011257600080fd5b3461025357806003193601126102535761012a61195d565b9060243561013733611ac8565b610142811515611b03565b60019283548652602091600783528387209360018060a01b039361018581848760025416878d8d8851968795869485936323b872dd60e01b855233908501611c20565b03925af19081610226575b506101f0576101b9948251946101a586611bca565b3386521690840152820152600a8301611cd5565b6010810160ff1981541690556011429101558054918183018093116101dd57505580f35b634e487b7160e01b845260119052602483fd5b610200948251946101a586611bca565b601081018260ff198254161790556011429101558054918183018093116101dd57505580f35b61024590833d851161024c575b61023d8183611be5565b810190611c08565b5038610190565b503d610233565b8280fd5b5090346102535760203660031901126102535761027261195d565b9061027b6119ae565b6001600160a01b039182169283156102b657505082546001600160a01b031981168317845516600080516020611d908339815191528380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b5082346103b557602090816003193601126103b55782906001600160a01b0361032f61195d565b16815260068352818120908251808584549182815201908194845286842090845b8181106103a15750505081610366910382611be5565b83519485948186019282875251809352850193925b82811061038a57505050500390f35b83518552869550938101939281019260010161037b565b825484529288019260019283019201610350565b80fd5b8382346103db57816003193601126103db5760ff6020925460a01c169051908152f35b5080fd5b5050346103db5760203660031901126103db573560ff811681036103db576104056119ae565b815460ff60a01b191660a09190911b60ff60a01b1617815580f35b503461025357826003193601126102535761043a33611ac8565b3383526020906005825260028185200191825491821561053257600193845487526007835261048f838389209560018060a01b0360025416898b875180968195829463a9059cbb60e01b845233908401611cba565b03925af19081610515575b506104c157906101b99291549051916104b283611b78565b33835282015260088301611c42565b9392916104d99185979697549051916104b283611b78565b601081018260ff1982541617905560114291015580549080820180921161050257839450555580f35b634e487b7160e01b845260118552602484fd5b61052b90853d871161024c5761023d8183611be5565b503861049a565b5162461bcd60e51b815280850191909152602b60248201527f416363756d756c6174656420696e746572657374206d7573742062652067726560448201526a061746572207468616e20360ac1b6064820152608490fd5b50346102535780600319360112610253576105a261195d565b90602435906105b033611ac8565b6001928354865260076020528186209260018060a01b0392836003541688813b156103b557836105f99286838c875196879586948593632142170760e11b855233908501611c20565b03925af1908161063e575b5061062e576101b99381519361061985611bca565b338552166020840152820152600d8301611cd5565b6102009381519361061985611bca565b61064790611b4f565b38610604565b8382346103db57816003193601126103db57905490516001600160a01b039091168152602090f35b83346103b55760203660031901126103b55761069761069261195d565b611ac8565b80f35b8382346103db5760203660031901126103db576020906106c06106bb61195d565b611a50565b9051908152f35b83346103b557806003193601126103b5576106e06119ae565b80546001600160a01b03198116825581906001600160a01b0316600080516020611d908339815191528280a380f35b503461025357826003193601126102535760025481516370a0823160e01b81523093810193909352602090839060249082906001600160a01b03165afa91821561079b578392610764575b6020838351908152f35b9091506020813d8211610793575b8161077f60209383611be5565b81010312610253576020925051903861075a565b3d9150610772565b81513d85823e3d90fd5b50346102535760209081600319360112610ac85782356107c433611ac8565b6107cf811515611b03565b60018060a01b0392836002541691835193636eb1769f60e11b8552338786015260249430868201528381604481885afa9081156109dc579083918a91610b46575b5010610b0c5760019586548952600784526108498484848c20978b8d87518096819582946323b872dd60e01b8452309033908501611c20565b03925af19081610aef575b506108ad5750906108779291519161086b83611b78565b33835282015282611c42565b6010810160ff19815416905560114291015581549282840180941161089c5750505580f35b634e487b7160e01b85526011905283fd5b3389526005845286828a20016108c4848254611abb565b9055338952600584524288838b20015587828a20015461012c8101809111610add57908991338352600586526006848420015580600354169083516370a0823160e01b8152338b82015286818a81865afa908115610ad3578491610aa2575b501590816109e6575b5061098d575b5050906109599291338952600583526003818a20015415610980575b519161086b83611b78565b601081018360ff1982541617905560114291015581549282840180941161089c5750505580f35b426003828b20015561094e565b803b156103db578190878451809481936335313c2160e11b83528d33908401525af180156109dc5790610959949392916109cd575b899192939450610932565b6109d690611b4f565b386109c2565b82513d8b823e3d90fd5b91925050338a5260058552888589858d200154926002541685519283809263313ce56760e01b82525afa8015610a98578b90610a5c575b60ff915016604d8111610a4a57600a0a90620f42409180830292830403610a4a57908a929110153861092c565b634e487b7160e01b8b5260118a52878bfd5b508581813d8311610a91575b610a728183611be5565b81010312610a8d575160ff81168103610a8d5760ff90610a1d565b8a80fd5b503d610a68565b84513d8d823e3d90fd5b90508681813d8311610acc575b610ab98183611be5565b81010312610ac8575138610923565b8380fd5b503d610aaf565b85513d86823e3d90fd5b634e487b7160e01b8a5260118952868afd5b610b0590863d881161024c5761023d8183611be5565b5038610854565b5162461bcd60e51b815280870183905260168186015275496e73756666696369656e7420616c6c6f77616e636560501b6044820152606490fd5b809250858092503d8311610b74575b610b5f8183611be5565b81010312610b705782905138610810565b8880fd5b503d610b55565b503461025357602080600319360112610ac857823591610b9a33611ac8565b610ba5831515611b03565b620f424080841115610dae57338652848352610bc48483882054611abb565b11610d4b5760025481516370a0823160e01b815230868201526001600160a01b0390911692908181602481875afa908115610d41579085918891610d0c575b5010610cb1576001938454875260078252610c3a8282858a2096898b885180968195829463a9059cbb60e01b845233908401611cba565b03925af19081610c94575b50610c6e57826101b9935192610c5a84611bca565b3084523390840152820152600a8301611cd5565b61020092338852868352808820610c86838254611abb565b9055805192610c5a84611bca565b610caa90843d861161024c5761023d8183611be5565b5038610c45565b8490608492519162461bcd60e51b8352820152603060248201527f466175636574206661696c65643a206e6f7420656e6f75676820746f6b656e7360448201526f081a5b881d1a194818dbdb9d1c9858dd60821b6064820152fd5b809250838092503d8311610d3a575b610d258183611be5565b81010312610d365784905138610c03565b8680fd5b503d610d1b565b83513d89823e3d90fd5b5162461bcd60e51b81529283015250603960248201527f466175636574206661696c65643a20757365722068617320616c7265616479206044820152781c995858da1959081d1a19481b585e1a5b5d5b481b1a5b5a5d603a1b6064820152608490fd5b815162461bcd60e51b8152808601849052602260248201527f416d6f756e74206d757374206265206c657373207468616e20312e3030302e30604482015261030360f41b6064820152608490fd5b503461025357610e0b3661190b565b91610e1533611ac8565b33855260069260209084825282872054156110ff57610e35811515611b03565b3387528482528287205481116110b157865b818110610e52578780f35b610e5d818387611c7c565b600380549135916001600160a01b03168a813b156103b55783610e99928c838b51809681958294632142170760e11b8452339030908501611c20565b03925af190816110a2575b50610f175750600180548a5260078552610ed6868b2092875190610ec782611b78565b33825287820152898401611c42565b60108201805460ff1916905542601192830155805480820192908310610f06575055610f0190611c6d565b610e47565b634e487b7160e01b8b52895260248afd5b90949597989391969233855283835286852098855b8a54808210156110905788610f41838e611ca2565b905490871b1c14610f5b5750610f5690611c6d565b610f2c565b9060009c9b9299989493969a95979c199182810190811161107d5790610f94610f87610faf9386611ca2565b905490871b1c9185611ca2565b90919082549060031b600019811b9283911b16911916179055565b8154801561106a57810192610fc48484611ca2565b81939154921b1b19169055555b8854338a5260058552858a20805460ff9260a81c8316818416038381116110575760ff1993849116911617905560019081548b526007865261102b878c209388519061101c82611b78565b338252888201528a8501611c42565b8160108401918254161790556011918242910155805491818301809311610f06575055610f0190611c6d565b634e487b7160e01b8d5260118c5260248dfd5b634e487b7160e01b8d5260318c5260248dfd5b634e487b7160e01b8e5260118d5260248efd5b50509695915092969193989750610fd1565b6110ab90611b4f565b38610ea4565b825162461bcd60e51b8152808701839052602260248201527f496e76616c6964206e756d626572206f66204e46547320746f20776974686472604482015261617760f01b6064820152608490fd5b825162461bcd60e51b81528087018390526017602482015276596f7520646f6e2774206861766520616e79204e46547360481b6044820152606490fd5b5090346102535760203660031901126102535760209282916001600160a01b0361116461195d565b168252845220549051908152f35b50346102535760209081600319360112610ac85782359161119233611ac8565b338552600581528185209060068201544210611271576111b3841515611b03565b338652600581526001936111ce8186868a2001541015611b03565b84548752600782528387209385611208848460018060a01b03600254168b8d875180968195829463a9059cbb60e01b845233908401611cba565b03925af19081611254575b5061123757506101b99350519161122983611b78565b338352820152848301611c42565b6102009401611247838254611a06565b9055519161122983611b78565b61126a90863d881161024c5761023d8183611be5565b5038611213565b8460649184519162461bcd60e51b83528201526017602482015276151bdad95b9cc8185c99481cdd1a5b1b081b1bd8dad959604a1b6044820152fd5b8382346103db57816003193601126103db5760209051428152f35b5034610253576020366003190112610253578060e0936112e661195d565b8160c084516112f481611baf565b82815282602082015282868201528260608201528260808201528260a0820152015260018060a01b0316815260056020522081519161133283611baf565b60ff8254169384845260018301549160208501928352600284015481860190815260038501549260608701938452850154936080870194855260c0600660058801549760a08a0198895201549701968752825197885251602088015251908601525160608501525160808401525160a08301525160c0820152f35b5082346103b557602091826003193601126103db57808051926113cf84611b93565b81516113da81611b78565b8181528186820152845281516113ef81611b78565b818152818682015285850152815161140681611b78565b818152818682015282850152815161141d81611b78565b81815281868201526060850152815161143581611b78565b8181528186820152608085015261144a611d15565b60a0850152611457611d15565b60c08501528060e085015280610100809501528535815260078552209181519461148086611b93565b61148984611d34565b865261149760028501611d34565b94860194855283016114a890611d34565b858301908152906114bb60068501611d34565b606087019081526114ce60088601611d34565b60808801908152906114e2600a8701611d5b565b60a08901908152936114f6600d8801611d5b565b9560c08a01968752601088015460ff169760e08b0198151589526011015498858b01998a528151809b519061152a91611973565b51908a0161153791611973565b516080890161154591611973565b5160c0880161155391611973565b5190860161156091611973565b51610140850161156f9161198b565b516101a0840161157e9161198b565b5115156102008301525161022082015261024090f35b509034610253576080366003190112610253576115af61195d565b6001600160a01b039160243583811690819003611673576001600160401b0391606435919083831161166f573660238401121561166f57820135928311610d36573660248484010111610d3657916020968160247f1d823cdc8f0514a95b53538df2d2f3deaf98d1c534c6e750daa593173c27f8f097969460a0968a519889971687528b8701526044358a870152608060608701528260808701520185850137828201840152601f01601f19168101030190a151630a85bd0160e11b8152f35b8780fd5b8580fd5b509034610253576116873661190b565b61169392919233611ac8565b61169e811515611b03565b845b8181106116ab578580f35b6116b6818386611c7c565b60035486516331a9108f60e11b81529135858301819052916020916024916001600160a01b039182169184828581865afa918215611901578c926118c5575b503391160361188a5789813b156103b5578461172a9289838d51809681958294632142170760e11b8452309033908501611c20565b03925af1908161187b575b506117a75761176760019283548b5260078152898b20948a519161175883611b78565b33835282015260028501611c42565b60108301805460ff19169055426011938401558154808301939084106117985750505561179390611c6d565b6116a0565b634e487b7160e01b8a52865288fd5b33895260068252878920918254600160401b8110156118695784610f946117d5926001968782018155611ca2565b61183c60ff918b83815460a81c16933382526005908184528d8320906117ff825497828916611a29565b1660ff198097161790553382528083528c429220015584548c52600781528a8c20958b519161182d83611b78565b33835282015260028601611c42565b82601085019182541617905560119283429101558154928284018094116117985750505561179390611c6d565b634e487b7160e01b8b5260418852828bfd5b61188490611b4f565b38611735565b885162461bcd60e51b815280880184905260168184015275165bdd48191bdb89dd081bdddb881d1a1a5cc813919560521b6044820152606490fd5b9091508481813d83116118fa575b6118dd8183611be5565b810103126118f6575181811681036118f65790386116f5565b8b80fd5b503d6118d3565b8b513d8e823e3d90fd5b906020600319830112611958576001600160401b03916004359083821161195857806023830112156119585781600401359384116119585760248460051b83010111611958576024019190565b600080fd5b600435906001600160a01b038216820361195857565b80516001600160a01b03168252602090810151910152565b6040809160018060a01b0380825116855260208201511660208501520151910152565b6000546001600160a01b031633036119c257565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b91908203918211611a1357565b634e487b7160e01b600052601160045260246000fd5b9060ff8091169116019060ff8211611a1357565b81810292918115918404141715611a1357565b6001600160a01b03166000908152600560205260409020600181015480611a78575050600090565b81611ab2611ab79260ff611aab611a98600363bbf81e0098015442611a06565b94828060005460a01c1691541690611a29565b1690611a3d565b611a3d565b0490565b91908201809211611a1357565b6001600160a01b038116600090815260056020526040902090611aea90611a50565b611af960028301918254611abb565b9055600342910155565b15611b0a57565b60405162461bcd60e51b815260206004820152601d60248201527f416d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606490fd5b6001600160401b038111611b6257604052565b634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b03821117611b6257604052565b61012081019081106001600160401b03821117611b6257604052565b60e081019081106001600160401b03821117611b6257604052565b606081019081106001600160401b03821117611b6257604052565b601f909101601f19168101906001600160401b03821190821017611b6257604052565b90816020910312611958575180151581036119585790565b6001600160a01b03918216815291166020820152604081019190915260600190565b815181546001600160a01b0319166001600160a01b0391909116178155602090910151600190910155565b6000198114611a135760010190565b9190811015611c8c5760051b0190565b634e487b7160e01b600052603260045260246000fd5b8054821015611c8c5760005260206000200190600090565b6001600160a01b039091168152602081019190915260400190565b815181546001600160a01b039182166001600160a01b03199182161783556020840151600184018054919093169116179055604090910151600290910155565b60405190611d2282611bca565b60006040838281528260208201520152565b90604051611d4181611b78565b82546001600160a01b031681526001909201546020830152565b90604051611d6881611bca565b82546001600160a01b0390811682526001840154166020820152600290920154604083015256fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220121b175286dfe2433d1c6dacc53dce12b06dab1a489f6591fcf0f79649f215aa64736f6c63430008110033";

type MainContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MainContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MainContract__factory extends ContractFactory {
  constructor(...args: MainContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    tokenErc20: PromiseOrValue<string>,
    tokenErc721: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MainContract> {
    return super.deploy(
      tokenErc20,
      tokenErc721,
      overrides || {}
    ) as Promise<MainContract>;
  }
  override getDeployTransaction(
    tokenErc20: PromiseOrValue<string>,
    tokenErc721: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(tokenErc20, tokenErc721, overrides || {});
  }
  override attach(address: string): MainContract {
    return super.attach(address) as MainContract;
  }
  override connect(signer: Signer): MainContract__factory {
    return super.connect(signer) as MainContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MainContractInterface {
    return new utils.Interface(_abi) as MainContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MainContract {
    return new Contract(address, _abi, signerOrProvider) as MainContract;
  }
}
